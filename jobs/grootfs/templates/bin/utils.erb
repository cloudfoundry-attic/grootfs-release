#!/bin/bash

function create_volume_file() {
  local volume_file=$1

  <% if p('grootfs.store_size_bytes') <= 0 %>
  volume_size="$(( $(df --output=size  /var/vcap/data | sed 1d) * 1024 ))"
  <% else %>
  volume_size="<%= p('grootfs.store_size_bytes') %>"
  <% end %>

  # Do no recreate the volume file if it already exists
  if [ ! -f "$volume_file" ]
  then
    echo "creating volume..."
    truncate -s $volume_size  $volume_file
  fi
}

function create_loop_devices() {
  echo "creating loop devices..."
  for i in {0..255}
  do
    mknod -m 0660 /dev/loop${i} b 7 $i || true
  done
}

# copied from https://github.com/concourse/concourse/blob/master/jobs/baggageclaim/templates/baggageclaim_ctl.erb#L54
# break out of bosh-lite device limitations
function permit_device_control() {
  local devices_mount_info=$(cat /proc/self/cgroup | grep devices)

  if [ -z "$devices_mount_info" ]; then
    # cgroups not set up; must not be in a container
    return
  fi

  local devices_subsytems=$(echo $devices_mount_info | cut -d: -f2)
  local devices_subdir=$(echo $devices_mount_info | cut -d: -f3)

  if [ "$devices_subdir" = "/" ]; then
    # we're in the root devices cgroup; must not be in a container
    return
  fi

  if [ ! -e /tmp/devices-cgroup ]; then
    # mount our container's devices subsystem somewhere
    mkdir /tmp/devices-cgroup
    mount -t cgroup -o $devices_subsytems none /tmp/devices-cgroup
  fi

  # permit our cgroup to do everything with all devices
  echo a > /tmp/devices-cgroup${devices_subdir}/devices.allow || true

  umount /tmp/devices-cgroup || true
}

function setup_unprivileged_store() {
  local store_path=$1

  maximus_uid=$(/var/vcap/packages/idmapper/bin/maximus)
  chown $maximus_uid:$maximus_uid $store_path
  chmod 700 $store_path
}
