#!/bin/bash

set -ex

BASE_PATH=$(dirname $0)

main() {
  source /var/vcap/jobs/grootfs/bin/utils

  export PATH=/var/vcap/packages/grootfs/bin:/var/vcap/packages/xfs-progs/sbin:$PATH

  mkdir -p "$(store_mountpoint)/grootfs/store"

  pre_validate_store
  create_loop_devices
  permit_device_control

  pre_init_store unprivileged /var/vcap/jobs/grootfs/config/grootfs_config.yml
  init_unprivileged_store

  pre_init_store privileged /var/vcap/jobs/grootfs/config/privileged_grootfs_config.yml
  init_privileged_store

  <% if p('grootfs.use_persistent_disk') %>
  remount_persistent_disk
  unify_projectid_dir "$(store_mountpoint)/grootfs/store"
  <% end %>

  tardis_setup
}

unify_projectid_dir() {
  local store_root=$1

  local store1="${store_root}/unprivileged"
  local store2="${store_root}/privileged"
  local projectids_dir="${store_root}/projectids"

  mkdir -p $projectids_dir
  rm -rf "${store1}/projectids"
  rm -rf "${store2}/projectids"

  ln -s $projectids_dir "${store1}/projectids"
  ln -s $projectids_dir "${store2}/projectids"
}

remount_persistent_disk() {
  mount_options=$(mount | awk '/ \/var\/vcap\/store / {print $6}')
  if [ ! $(echo $mount_options | grep pquota) ]; then
    device=$(mount | awk '/ \/var\/vcap\/store / {print $1}')
    umount $device
    mount -t xfs -o noatime,nobarrier,pquota $device /var/vcap/store
    echo "Remounted /var/vcap/store with pquota option"
  else
    echo "/var/vcap/store already mounted with pquota option"
  fi
}

pre_init_store() {
  local store_name=$1
  local store_config=$2
  local store_path="$(store_mountpoint)/grootfs/store/${store_name}"

  converge_store ${store_name}
}

init_privileged_store() {
  local config_path=/var/vcap/jobs/grootfs/config/privileged_grootfs_config.yml

  echo "Initialising privilged store using config at ${config_path}"

  grootfs --config ${config_path} init-store \
    --store-size-bytes $(volume_size)
}

init_unprivileged_store() {
  local config_path=/var/vcap/jobs/grootfs/config/grootfs_config.yml

  echo "Initialising unprivileged store using config at ${config_path}"

  grootfs --config ${config_path} init-store \
    --store-size-bytes $(volume_size) \
    --uid-mapping "$(unprivileged_root_mapping)" \
    --uid-mapping "$(unprivileged_range_mapping)" \
    --gid-mapping "$(unprivileged_root_mapping)" \
    --gid-mapping "$(unprivileged_range_mapping)"
}


tardis_setup() {
  echo "setting up tardis..."
  chmod u+s /var/vcap/packages/grootfs/bin/tardis
}

# Temporary upgrade path
converge_store() {
  local store_type=$1

  local old_volume_path="$(store_mountpoint)/grootfs/volume_${store_type}"
  local new_volume_path="$(store_mountpoint)/grootfs/store/${store_type}.backing-store"
  local store_path="$(store_mountpoint)/grootfs/store/${store_type}"

  if mount | grep $old_volume_path | grep xfs
  then
    mv $old_volume_path $new_volume_path
    mount -t xfs -o remount,noatime,pquota,nobarrier $new_volume_path $store_path
  fi
}

pre_validate_store() {
  <% if p('grootfs.store_size_bytes') > 0 && p('grootfs.driver') == 'overlay-xfs' %>
    if [ $(vcap_data_filesystem) = "xfs" ]; then
      echo "Filesystem already XFS. Set 'grootfs.store_size_bytes property' to 0"
      exit 1
    fi
  <% end %>
  return
}

main
